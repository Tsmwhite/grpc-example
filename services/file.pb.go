// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: protobufs/file.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_file_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_file_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_protobufs_file_proto_rawDescGZIP(), []int{0}
}

func (x *File) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_file_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_file_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_protobufs_file_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobufs_file_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_protobufs_file_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_protobufs_file_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_protobufs_file_proto protoreflect.FileDescriptor

var file_protobufs_file_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x1a, 0x0a, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x19, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0x64, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0a, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x1a, 0x0e, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x12, 0x27, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0d,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x30, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x2e,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protobufs_file_proto_rawDescOnce sync.Once
	file_protobufs_file_proto_rawDescData = file_protobufs_file_proto_rawDesc
)

func file_protobufs_file_proto_rawDescGZIP() []byte {
	file_protobufs_file_proto_rawDescOnce.Do(func() {
		file_protobufs_file_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobufs_file_proto_rawDescData)
	})
	return file_protobufs_file_proto_rawDescData
}

var file_protobufs_file_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_protobufs_file_proto_goTypes = []interface{}{
	(*File)(nil),     // 0: file.File
	(*Request)(nil),  // 1: file.Request
	(*Response)(nil), // 2: file.Response
}
var file_protobufs_file_proto_depIdxs = []int32{
	0, // 0: file.FileHandelService.upload:input_type -> file.File
	1, // 1: file.FileHandelService.download:input_type -> file.Request
	2, // 2: file.FileHandelService.upload:output_type -> file.Response
	0, // 3: file.FileHandelService.download:output_type -> file.File
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protobufs_file_proto_init() }
func file_protobufs_file_proto_init() {
	if File_protobufs_file_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobufs_file_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_file_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobufs_file_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobufs_file_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobufs_file_proto_goTypes,
		DependencyIndexes: file_protobufs_file_proto_depIdxs,
		MessageInfos:      file_protobufs_file_proto_msgTypes,
	}.Build()
	File_protobufs_file_proto = out.File
	file_protobufs_file_proto_rawDesc = nil
	file_protobufs_file_proto_goTypes = nil
	file_protobufs_file_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileHandelServiceClient is the client API for FileHandelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileHandelServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (FileHandelService_UploadClient, error)
	Download(ctx context.Context, in *Request, opts ...grpc.CallOption) (FileHandelService_DownloadClient, error)
}

type fileHandelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileHandelServiceClient(cc grpc.ClientConnInterface) FileHandelServiceClient {
	return &fileHandelServiceClient{cc}
}

func (c *fileHandelServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FileHandelService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileHandelService_serviceDesc.Streams[0], "/file.FileHandelService/upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileHandelServiceUploadClient{stream}
	return x, nil
}

type FileHandelService_UploadClient interface {
	Send(*File) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type fileHandelServiceUploadClient struct {
	grpc.ClientStream
}

func (x *fileHandelServiceUploadClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileHandelServiceUploadClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileHandelServiceClient) Download(ctx context.Context, in *Request, opts ...grpc.CallOption) (FileHandelService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileHandelService_serviceDesc.Streams[1], "/file.FileHandelService/download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileHandelServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileHandelService_DownloadClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type fileHandelServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *fileHandelServiceDownloadClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileHandelServiceServer is the server API for FileHandelService service.
type FileHandelServiceServer interface {
	Upload(FileHandelService_UploadServer) error
	Download(*Request, FileHandelService_DownloadServer) error
}

// UnimplementedFileHandelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFileHandelServiceServer struct {
}

func (*UnimplementedFileHandelServiceServer) Upload(FileHandelService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedFileHandelServiceServer) Download(*Request, FileHandelService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterFileHandelServiceServer(s *grpc.Server, srv FileHandelServiceServer) {
	s.RegisterService(&_FileHandelService_serviceDesc, srv)
}

func _FileHandelService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileHandelServiceServer).Upload(&fileHandelServiceUploadServer{stream})
}

type FileHandelService_UploadServer interface {
	SendAndClose(*Response) error
	Recv() (*File, error)
	grpc.ServerStream
}

type fileHandelServiceUploadServer struct {
	grpc.ServerStream
}

func (x *fileHandelServiceUploadServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileHandelServiceUploadServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileHandelService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileHandelServiceServer).Download(m, &fileHandelServiceDownloadServer{stream})
}

type FileHandelService_DownloadServer interface {
	Send(*File) error
	grpc.ServerStream
}

type fileHandelServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *fileHandelServiceDownloadServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

var _FileHandelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "file.FileHandelService",
	HandlerType: (*FileHandelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "upload",
			Handler:       _FileHandelService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "download",
			Handler:       _FileHandelService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobufs/file.proto",
}
